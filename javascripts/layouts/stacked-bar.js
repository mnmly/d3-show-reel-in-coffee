// Generated by CoffeeScript 1.3.3
(function() {

  define(['d3'], function() {
    var StackedBarLayout;
    return StackedBarLayout = (function() {

      function StackedBarLayout(options) {
        this.svg = options.svg, this.xScale = options.xScale, this.yScale = options.yScale, this.symbols = options.symbols, this.generators = options.generators, this.color = options.color, this.height = options.height, this.width = options.width, this.duration = options.duration, this.delay = options.delay, this.onAnimationEnd = options.onAnimationEnd;
        this.prepareSymbols();
      }

      StackedBarLayout.prototype.prepareSymbols = function() {
        var stack, symbolNodes, that, transSymbolNodes,
          _this = this;
        this.xScale.rangeRoundBands([0, this.width - 60], .1);
        stack = d3.layout.stack().values(function(d) {
          return d.values;
        }).x(function(d) {
          return d.date;
        }).y(function(d) {
          return d.price;
        }).out(function(d, y0, y) {
          return d.price0 = y0;
        }).order('reverse');
        stack(this.symbols);
        symbolNodes = this.svg.selectAll('.symbol');
        this.yScale.domain([
          0, d3.max(this.symbols[0].values.map(function(d) {
            return d.price + d.price0;
          }))
        ]).range([this.height, 0]);
        transSymbolNodes = symbolNodes.transition().duration(this.duration);
        transSymbolNodes.select('text').delay(this.symbols[0].values.length * 10).attr('transform', function(d) {
          d = d.values[d.values.length - 1];
          return "translate(" + (_this.width - 60) + ", " + (_this.yScale(d.price / 2 + d.price0)) + ")";
        });
        that = this;
        transSymbolNodes.selectAll('rect').delay(function(d, i) {
          return i * 10;
        }).attr('y', function(d) {
          return _this.yScale(d.price0 + d.price);
        }).attr('height', function(d) {
          return _this.height - _this.yScale(d.price);
        }).each("end", function() {
          var _this = this;
          return d3.select(this).style('stroke', '#fff').style('stroke-opacity', 1e-6).transition().duration(that.duration / 2).attr('x', function(d) {
            return that.xScale(d.date);
          }).attr('width', that.xScale.rangeBand()).style('stroke-opacity', 1);
        });
        return setTimeout(this.onAnimationEnd, this.duration + this.symbols[0].values.length * 10 + this.delay);
      };

      return StackedBarLayout;

    })();
  });

}).call(this);
