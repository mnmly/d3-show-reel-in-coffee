// Generated by CoffeeScript 1.3.3
(function() {

  define(['d3'], function() {
    var TransposeBarLayout;
    return TransposeBarLayout = (function() {

      function TransposeBarLayout(options) {
        this.svg = options.svg, this.xScale = options.xScale, this.yScale = options.yScale, this.symbols = options.symbols, this.generators = options.generators, this.color = options.color, this.height = options.height, this.width = options.width, this.duration = options.duration, this.delay = options.delay, this.onAnimationEnd = options.onAnimationEnd;
        this.prepareSymbols();
      }

      TransposeBarLayout.prototype.prepareSymbols = function() {
        var stack, symbolNodes, transSymbolNodes,
          _this = this;
        this.xScale.domain(this.symbols.map(function(d) {
          return d.key;
        })).rangeRoundBands([0, this.width], .2);
        this.yScale.domain([
          0, d3.max(this.symbols.map(function(d) {
            return d3.sum(d.values.map(function(d) {
              return d.price;
            }));
          }))
        ]);
        stack = d3.layout.stack().x(function(d, i) {
          return i;
        }).y(function(d) {
          return d.price;
        }).out(function(d, y0, y) {
          return d.price0 = y0;
        });
        stack(d3.zip.apply(null, this.symbols.map(function(d) {
          return d.values;
        })));
        symbolNodes = this.svg.selectAll('.symbol');
        transSymbolNodes = symbolNodes.transition().duration(this.duration / 2);
        transSymbolNodes.selectAll('rect').delay(function(d, i) {
          return i * 10;
        }).attr('y', function(d) {
          return _this.yScale(d.price0 + d.price) - 1;
        }).attr('height', function(d) {
          return _this.height - _this.yScale(d.price) + 1;
        }).attr('x', function(d) {
          return _this.xScale(d.symbol);
        }).attr('width', this.xScale.rangeBand()).style('stroke-opacity', 1e-6);
        transSymbolNodes.select('text').attr('x', 0).attr('transform', function(d) {
          return "translate(" + (_this.xScale(d.key) + _this.xScale.rangeBand() / 2) + ", " + _this.height + ")";
        }).attr('dy', '1.31em').each("end", function(d, i, j) {
          return d3.select(this).attr('x', null).attr('text-anchor', 'middle');
        });
        this.svg.select('line').transition().duration(this.duration).attr('x2', this.width);
        return setTimeout(this.onAnimationEnd, this.duration + this.symbols[0].values.length * 10 + this.delay);
      };

      return TransposeBarLayout;

    })();
  });

}).call(this);
