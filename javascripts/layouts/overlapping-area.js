// Generated by CoffeeScript 1.3.3
(function() {

  define(['d3'], function() {
    var OverlappingAreaLayout;
    return OverlappingAreaLayout = (function() {

      function OverlappingAreaLayout(options) {
        this.svg = options.svg, this.xScale = options.xScale, this.yScale = options.yScale, this.symbols = options.symbols, this.generators = options.generators, this.color = options.color, this.height = options.height, this.width = options.width, this.duration = options.duration, this.delay = options.delay, this.onAnimationEnd = options.onAnimationEnd;
        this.prepareSymbols();
      }

      OverlappingAreaLayout.prototype.prepareSymbols = function() {
        var symbolNodes,
          _this = this;
        symbolNodes = this.svg.selectAll('.symbol');
        this.generators.line.y(function(d) {
          return _this.yScale(d.price0 + d.price);
        });
        symbolNodes.select('path.line').attr('d', function(d) {
          return _this.generators.line(d.values);
        });
        this.yScale.domain([
          0, d3.max(this.symbols.map(function(d) {
            return d.maxPrice;
          }))
        ]).range([this.height, 0]);
        this.generators.area.y0(this.height).y1(function(d) {
          return _this.yScale(d.price);
        });
        this.generators.line.y(function(d) {
          return _this.yScale(d.price);
        });
        symbolNodes = symbolNodes.transition().duration(this.duration);
        symbolNodes.select('path.line').style('stroke-opacity', 1).attr('d', function(d) {
          return _this.generators.line(d.values);
        });
        symbolNodes.select('path.area').style('fill-opacity', .5).attr('d', function(d) {
          return _this.generators.area(d.values);
        });
        symbolNodes.select('text').attr('dy', '.31em').attr('transform', function(d) {
          d = d.values[d.values.length - 1];
          return "translate(" + (_this.width - 60) + ", " + (_this.yScale(d.price / 2 + d.price0)) + ")";
        });
        this.svg.append('line').attr('class', 'line').attr('x1', 0).attr('x2', this.width - 60).attr('y1', this.height).attr('y2', this.height).style('stroke-opacity', 1e-6).transition().duration(this.duration).style('stroke-opacity', 1);
        return setTimeout(this.onAnimationEnd, this.duration + this.delay);
      };

      return OverlappingAreaLayout;

    })();
  });

}).call(this);
