// Generated by CoffeeScript 1.3.3
(function() {

  define(['d3'], function() {
    var LineLayout;
    return LineLayout = (function() {

      function LineLayout(options) {
        this.svg = options.svg, this.xScale = options.xScale, this.yScale = options.yScale, this.symbols = options.symbols, this.generators = options.generators, this.color = options.color, this.height = options.height, this.width = options.width, this.onAnimationEnd = options.onAnimationEnd;
        this.setupScale();
        this.symbolNodes = this.svg.selectAll('g');
        this.kickoffAnimation();
      }

      LineLayout.prototype.setupScale = function() {
        this.xScale = d3.time.scale().range([0, this.width - 60]);
        this.yScale = d3.scale.linear().range([this.height / 4 - 20, 0]);
        return this.xScale.domain([
          d3.min(this.symbols, function(d) {
            return d.values[0].date;
          }), d3.max(this.symbols, function(d) {
            return d.values[d.values.length - 1].date;
          })
        ]);
      };

      LineLayout.prototype.prepareSymbols = function() {
        var _this = this;
        this.symbolNodes = this.svg.selectAll('g').attr('transform', function(d, i) {
          return "translate(0, " + (i * _this.height / 4 + 10) + ")";
        });
        return this.symbolNodes.each(function(d, i, j) {
          var symbol;
          symbol = d3.select(_this.symbolNodes[j][i]);
          symbol.append('path').attr('class', 'line');
          symbol.append('circle').attr('r', 5).style('fill', function(d) {
            return _this.color(d.key);
          }).style('stroke', '#000').style('stroke-width', '2px');
          return symbol.append('text').attr("x", 12).attr('dy', ".31em").text(d.key);
        });
      };

      LineLayout.prototype.kickoffAnimation = function() {
        var k, n,
          _this = this;
        k = 1;
        n = this.symbols[0].values.length;
        return d3.timer(function() {
          _this.draw(k);
          if ((k += 1) >= n - 1) {
            _this.draw(n - 1);
            setTimeout(_this.onAnimationEnd, 500);
            return true;
          }
        });
      };

      LineLayout.prototype.draw = function(k) {
        var _this = this;
        return this.symbolNodes.each(function(d, i, j) {
          var symbol;
          symbol = d3.select(_this.symbolNodes[j][i]);
          _this.yScale.domain([0, d.maxPrice]);
          symbol.select('path').attr('d', function(d) {
            return _this.generators.line(d.values.slice(0, k + 1));
          });
          return symbol.selectAll('circle, text').data(function(d) {
            return [d.values[k], d.values[k]];
          }).attr('transform', function(d) {
            return "translate(" + (_this.xScale(d.date)) + ", " + (_this.yScale(d.price)) + ")";
          });
        });
      };

      return LineLayout;

    })();
  });

}).call(this);
