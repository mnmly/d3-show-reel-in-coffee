// Generated by CoffeeScript 1.3.3
(function() {

  define(['d3'], function() {
    var HorizonLayout;
    return HorizonLayout = (function() {

      function HorizonLayout(options) {
        this.svg = options.svg, this.xScale = options.xScale, this.yScale = options.yScale, this.symbols = options.symbols, this.generators = options.generators, this.color = options.color, this.height = options.height, this.width = options.width, this.duration = options.duration, this.delay = options.delay, this.onAnimationEnd = options.onAnimationEnd;
        this.prepareSymbols();
      }

      HorizonLayout.prototype.prepareSymbols = function() {
        var color, symbolNodes,
          _this = this;
        this.svg.insert('defs', '.symbol').append('clipPath').attr('id', 'clip').append('rect').attr('width', this.width).attr('height', this.height / 4 - 20);
        color = d3.scale.ordinal().range(['#c6bdef', '#9ecae1', '#6baed6']);
        symbolNodes = this.svg.selectAll('.symbol').attr('clip-path', "url('#clip')");
        this.generators.area.y0(this.height / 4 - 20);
        symbolNodes.select('circle').transition().duration(this.duration).attr('transform', function(d) {
          return "translate(" + (_this.width - 60) + ", " + (-_this.height / 4) + ")";
        }).remove();
        symbolNodes.select('text').transition().duration(this.duration).attr('transform', function(d) {
          return "translate(" + (_this.width - 60) + ", " + (_this.height / 4 - 20) + ")";
        }).attr('dy', '0em');
        symbolNodes.each(function(d, i, j) {
          var node;
          node = symbolNodes[j][i];
          _this.yScale.domain([0, d.maxPrice]);
          d3.select(node).selectAll('.area').data(d3.range(3)).enter().insert('path', '.line').attr('class', 'area').attr('transform', function(d) {
            return "translate(0, " + (d * (_this.height / 4 - 20)) + ")";
          }).attr('d', _this.generators.area(d.values)).style('fill', function(d, i) {
            return color(i);
          }).style('fill-opacity', 1e-6);
          _this.yScale.domain([0, d.maxPrice / 3]);
          d3.select(node).selectAll('.line').transition().duration(_this.duration).attr('d', _this.generators.line(d.values)).style("stroke-opacity", 1e-6);
          return d3.select(node).selectAll('.area').transition().duration(_this.duration).style('fill-opacity', 1).attr('d', _this.generators.area(d.values)).each("end", function() {
            return d3.select(this).style('fill-opacity', null);
          });
        });
        return setTimeout(this.onAnimationEnd, this.duration + this.delay);
      };

      return HorizonLayout;

    })();
  });

}).call(this);
