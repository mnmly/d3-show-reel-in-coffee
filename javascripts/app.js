// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['d3', 'layouts/line', 'layouts/horizon', 'layouts/area', 'layouts/stacked-area', 'layouts/stream-graph', 'layouts/overlapping-area', 'layouts/grouped-bar', 'layouts/stacked-bar', 'layouts/transpose-bar', 'layouts/donut', 'layouts/donut-explode'], function(d3, LineLayout, HorizonLayout, AreaLayout, StackedAreaLayout, StreamGraphLayout, OverlappingAreaLayout, GroupedBarLayout, StackedBarLayout, TransposeBarLayout, DonutLayout, DonutExplode) {
    var Demo, h, m, w;
    m = [20, 20, 30, 20];
    w = 960 - m[1] - m[3];
    h = 500 - m[0] - m[2];
    return Demo = (function() {

      function Demo() {
        this.initDonutExplode = __bind(this.initDonutExplode, this);

        this.initDonutLayout = __bind(this.initDonutLayout, this);

        this.initTransposeBarLayout = __bind(this.initTransposeBarLayout, this);

        this.initStackedBarLayout = __bind(this.initStackedBarLayout, this);

        this.initGroupedBarLayout = __bind(this.initGroupedBarLayout, this);

        this.initOverlappingAreaLayout = __bind(this.initOverlappingAreaLayout, this);

        this.initStreamGraphLayout = __bind(this.initStreamGraphLayout, this);

        this.initStackedAreaLayout = __bind(this.initStackedAreaLayout, this);

        this.initAreaLayout = __bind(this.initAreaLayout, this);

        this.initHorizonLayout = __bind(this.initHorizonLayout, this);

        this.initLineLayout = __bind(this.initLineLayout, this);
        this.xScale = null;
        this.yScale = null;
        this.stocks = null;
        this.symbols = null;
        this.duration = 1000;
        this.delay = 500;
        this.currentLayout = null;
        this.color = d3.scale.category10();
        this.svg = this.setupCanvas();
        this.line = this.setupLine();
        this.area = this.setupArea();
        this.axis = this.setupAxis();
        this.generators = {
          line: this.line,
          area: this.area,
          axis: this.axis
        };
        this.fetchData();
      }

      Demo.prototype.setupCanvas = function() {
        return d3.select('.row').append('svg').attr('width', w + m[1] + m[3]).attr('height', h + m[0] + m[2]).append('g').attr('transform', "translate(" + m[3] + ", " + m[0] + ")");
      };

      Demo.prototype.setupLine = function() {
        var _this = this;
        return d3.svg.line().interpolate('basis').x(function(d) {
          return _this.currentLayout.xScale(d.date);
        }).y(function(d) {
          return _this.currentLayout.yScale(d.price);
        });
      };

      Demo.prototype.setupArea = function() {
        var _this = this;
        return d3.svg.area().interpolate('basis').x(function(d) {
          return _this.currentLayout.xScale(d.date);
        }).y(function(d) {
          return _this.currentLayout.yScale(d.price);
        });
      };

      Demo.prototype.setupAxis = function() {
        var _this = this;
        return d3.svg.line().interpolate('basis').x(function(d) {
          return _this.currentLayout.xScale(d.date);
        }).y(h);
      };

      Demo.prototype.fetchData = function() {
        var _this = this;
        return d3.csv('data/stocks.csv', function(data) {
          var g, parse;
          parse = d3.time.format('%b %Y').parse;
          _this.symbols = d3.nest().key(function(d) {
            return d.symbol;
          }).entries(_this.stocks = data);
          _this.symbols.forEach(function(s) {
            s.values.forEach(function(d) {
              d.date = parse(d.date);
              return d.price = +d.price;
            });
            s.maxPrice = d3.max(s.values, function(d) {
              return d.price;
            });
            return s.sumPrice = d3.sum(s.values, function(d) {
              return d.price;
            });
          });
          _this.symbols.sort(function(a, b) {
            return b.maxPrice - a.maxPrice;
          });
          g = _this.svg.selectAll('g').data(_this.symbols).enter().append('g').attr('class', 'symbol');
          return setTimeout(_this.initLineLayout, _this.duration);
        });
      };

      Demo.prototype.setupBaseElements = function() {
        var symbolNodes,
          _this = this;
        symbolNodes = this.svg.selectAll('g').attr('transform', function(d, i) {
          return "translate(0, " + (i * h / 4 + 10) + ")";
        });
        return symbolNodes.each(function(d, i, j) {
          var symbol;
          symbol = d3.select(symbolNodes[j][i]);
          symbol.append('path').attr('class', 'line');
          symbol.append('circle').attr('r', 5).style('fill', function(d) {
            return _this.color(d.key);
          }).style('stroke', '#000').style('stroke-width', '2px');
          return symbol.append('text').attr("x", 12).attr('dy', ".31em").text(d.key);
        });
      };

      Demo.prototype.initLineLayout = function() {
        var lineLayout;
        this.generators.line = this.setupLine();
        this.setupBaseElements();
        if (this.currentLayout) {
          this.xScale = this.currentLayout.xScale;
          this.yScale = this.currentLayout.yScale;
        }
        lineLayout = new LineLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.xScale,
          yScale: this.yScale,
          symbols: this.symbols,
          generators: this.generators,
          color: this.color,
          onAnimationEnd: this.initHorizonLayout
        });
        return this.currentLayout = lineLayout;
      };

      Demo.prototype.initHorizonLayout = function() {
        var horizonLayout;
        console.log("horizonsLayout starts");
        horizonLayout = new HorizonLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initAreaLayout
        });
        return this.currentLayout = horizonLayout;
      };

      Demo.prototype.initAreaLayout = function() {
        var areaLayout;
        console.log("areasLayout starts");
        areaLayout = new AreaLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initStackedAreaLayout
        });
        return this.currentLayout = areaLayout;
      };

      Demo.prototype.initStackedAreaLayout = function() {
        var stackedAreaLayout;
        console.log("stackedAreaLayout starts");
        stackedAreaLayout = new StackedAreaLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initStreamGraphLayout
        });
        return this.currentLayout = stackedAreaLayout;
      };

      Demo.prototype.initStreamGraphLayout = function() {
        var streamGraphLayout;
        console.log("streamGraphLayout starts");
        streamGraphLayout = new StreamGraphLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initOverlappingAreaLayout
        });
        return this.currentLayout = streamGraphLayout;
      };

      Demo.prototype.initOverlappingAreaLayout = function() {
        var overlappingAreaLayout;
        console.log("overlapping starts");
        overlappingAreaLayout = new OverlappingAreaLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initGroupedBarLayout
        });
        return this.currentLayout = overlappingAreaLayout;
      };

      Demo.prototype.initGroupedBarLayout = function() {
        var groupedBarLayout;
        console.log("groupedBarLayout starts");
        groupedBarLayout = new GroupedBarLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initStackedBarLayout
        });
        return this.currentLayout = groupedBarLayout;
      };

      Demo.prototype.initStackedBarLayout = function() {
        var stackedBarLayout;
        console.log("stackedBarLayout starts");
        stackedBarLayout = new StackedBarLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initTransposeBarLayout
        });
        return this.currentLayout = stackedBarLayout;
      };

      Demo.prototype.initTransposeBarLayout = function() {
        var transposeBarLayout;
        console.log("transposeBarLayout starts");
        transposeBarLayout = new TransposeBarLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initDonutLayout
        });
        return this.currentLayout = transposeBarLayout;
      };

      Demo.prototype.initDonutLayout = function() {
        var donutLayout;
        console.log("donutLayout starts");
        donutLayout = new DonutLayout({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initDonutExplode
        });
        return this.currentLayout = donutLayout;
      };

      Demo.prototype.initDonutExplode = function() {
        var donutExplode;
        console.log("donutLayout starts");
        donutExplode = new DonutExplode({
          svg: this.svg,
          height: h,
          width: w,
          xScale: this.currentLayout.xScale,
          yScale: this.currentLayout.yScale,
          symbols: this.symbols,
          generators: this.generators,
          duration: this.duration,
          delay: this.delay,
          color: this.color,
          onAnimationEnd: this.initLineLayout
        });
        return this.currentLayout = donutExplode;
      };

      return Demo;

    })();
  });

}).call(this);
